package com.zingkg.shippinginventorymanager;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.StringJoiner;
import javax.swing.JFileChooser;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

public class MainWindow extends javax.swing.JFrame {
    private Inventory inventory;

    public MainWindow(Inventory inventory) {
        this.inventory = inventory;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        loadButton = new javax.swing.JButton();
        updateLocationsButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorTextPane = new javax.swing.JTextPane();
        updateQuantityButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shipping Inventory Manager");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        updateLocationsButton.setText("Update Locations");
        updateLocationsButton.setActionCommand("Update Locations");
        updateLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLocationsButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        errorTextPane.setEditable(false);
        jScrollPane1.setViewportView(errorTextPane);

        updateQuantityButton.setText("Update Quantity");
        updateQuantityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateQuantityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateQuantityButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateLocationsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exportButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(updateLocationsButton)
                    .addComponent(exportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateQuantityButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveAndDisplayErrors(BufferedWriter bw, StringJoiner sj, String error) {
        writeLine(bw, error);
        sj.add(error);
    }

    private void saveInventory() {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(INVENTORY_FILE_PATH))) {
            inventory.saveInventory().forEach(line -> writeLine(writer, line));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            StringJoiner errorLines = new StringJoiner("\n");
            try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(ERROR_FILE_PATH))) {
                File selected = fileChooser.getSelectedFile();
                inventory.loadInventory(
                    Files.lines(selected.toPath()),
                    selected.getName()
                ).forEach(error ->
                    saveAndDisplayErrors(writer, errorLines, error)
                );
            } catch (IOException e) {
                e.printStackTrace();
            }
            errorTextPane.setText(errorLines.toString());
            saveInventory();
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void updateLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateLocationsButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            StringJoiner errorLines = new StringJoiner("\n");
            try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(ERROR_FILE_PATH))) {
                File selected = fileChooser.getSelectedFile();
                inventory.updateLocations(
                        Files.lines(selected.toPath()),
                        selected.getName()
                ).forEach(error ->
                    saveAndDisplayErrors(writer, errorLines, error)
                );
            } catch (IOException e) {
                e.printStackTrace();
            }
            errorTextPane.setText(errorLines.toString());
            saveInventory();
        }
    }//GEN-LAST:event_updateLocationsButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            saveInventory();
            exportInventory(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void exportInventory(File exportFile) {
        try (BufferedWriter writer = Files.newBufferedWriter(exportFile.toPath())) {
            inventory.exportInventory().forEach(line -> writeLine(writer, line));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void updateQuantityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateQuantityButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            StringJoiner errorLines = new StringJoiner("\n");
            try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(ERROR_FILE_PATH))) {
                File selected = fileChooser.getSelectedFile();
                inventory.updateQuantity(
                    Files.lines(selected.toPath()),
                    selected.getName()
                ).forEach(error ->
                    saveAndDisplayErrors(writer, errorLines, error)
                );
            } catch (IOException e) {
                e.printStackTrace();
            }
            errorTextPane.setText(errorLines.toString());
            saveInventory();
        }
    }//GEN-LAST:event_updateQuantityButtonActionPerformed

    private static final String INVENTORY_FILE_PATH = "internal/inventory.csv";
    private static final String ERROR_FILE_PATH = "internal/error.txt";

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Thread.currentThread().setName("Shipping Inventory Manager");

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                File inventoryFile = new File(INVENTORY_FILE_PATH);
                new MainWindow(
                    new Inventory(
                        Inventory.parseBuildingSetup(new File("internal/inventory-setup.xml")),
                        Files.lines(inventoryFile.toPath()),
                        inventoryFile.getName()
                    )
                ).setVisible(true);
            } catch (ParserConfigurationException | IOException | SAXException e) {
                e.printStackTrace();
            }
        });
    }

    private static void writeLine(BufferedWriter writer, String line) {
        try {
            writer.write(line);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane errorTextPane;
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton updateLocationsButton;
    private javax.swing.JButton updateQuantityButton;
    // End of variables declaration//GEN-END:variables
}
